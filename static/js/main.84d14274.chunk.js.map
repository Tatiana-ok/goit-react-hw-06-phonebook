{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","App.module.css","redux/phonebook-types.js","redux/phonebook-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/phonebook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","types","contactNew","payload","id","shortid","generate","name","number","deleteContact","changeFilter","ContactForm","state","onNameChange","e","setState","currentTarget","value","onNumberChange","handleSubmit","preventDefault","props","onSubmit","alert","className","s","containerForm","this","formInput","type","onChange","btnForm","Component","connect","dispatch","phonebookActions","getVisibleContacts","allContacts","filter","normolizedFilter","toLowerCase","contact","includes","contacts","items","onDeleteContact","contactId","listOfContact","map","itemOfListContact","itemNameContact","itemNumberContact","btnOfListContact","onClick","onChangeFilter","filterLabel","filterInput","App","container","createReducer","actions","find","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","persistReducer","phonebookReducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.84d14274.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listOfContact\":\"ContactList_listOfContact__3Axlx\",\"itemOfListContact\":\"ContactList_itemOfListContact__2su73\",\"itemNameContact\":\"ContactList_itemNameContact__1WMrl\",\"itemNumberContact\":\"ContactList_itemNumberContact__279KU\",\"btnOfListContact\":\"ContactList_btnOfListContact__37Bwj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"ContactForm_containerForm__1I1O8\",\"formInput\":\"ContactForm_formInput__13MHF\",\"btnForm\":\"ContactForm_btnForm__3cCI6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__1rkde\",\"filterLabel\":\"Filter_filterLabel__Cpyhh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1kX-5\"};","const ADD_CONTACT = 'phonebook/addContact';\r\nconst DELETE_CONTACT = 'phonebook/deleteContact';\r\nconst CHANGE_FILTER = 'phonebook/changeFilter';\r\n\r\nexport default {ADD_CONTACT, DELETE_CONTACT, CHANGE_FILTER};","import {createAction} from '@reduxjs/toolkit';\r\nimport types from './phonebook-types';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction(types.ADD_CONTACT, contactNew => ({\r\n    payload: {\r\n        id: shortid.generate(),\r\n        name: contactNew.name,\r\n        number: contactNew.number\r\n    }\r\n}));\r\n\r\nconst deleteContact = createAction(types.DELETE_CONTACT);\r\n\r\nconst changeFilter = createAction(types.CHANGE_FILTER);\r\n\r\nexport default {addContact, deleteContact, changeFilter};","import { Component } from 'react';\nimport s from './ContactForm.module.css';\nimport {connect} from 'react-redux';\nimport phonebookActions from '../../redux/phonebook-actions';\n\nclass ContactForm extends Component {\n  state = {\n    id: '',\n    name: '',\n    number: '',\n  };\n\n  onNameChange = e => {\n    this.setState({ name: e.currentTarget.value });\n  };\n\n  onNumberChange = e => {\n    this.setState({ number: e.currentTarget.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if(this.state.number !== ''){\n      this.props.onSubmit(this.state);\n      this.setState({ name: '', number: '' });\n      return\n    };\n    alert(\"Заполните данные контакта!\")\n  };\n\n  render() {\n    return (\n      <form className={s.containerForm} onSubmit={this.handleSubmit}>\n        <label>\n          <p>Name</p>\n          <input\n            className={s.formInput}\n            type=\"text\"\n            onChange={this.onNameChange}\n          />\n        </label>\n        <label>\n          <p>Number</p>\n          <input\n            className={s.formInput}\n            type=\"text\"\n            onChange={this.onNumberChange}\n          />\n        </label>\n        <button className={s.btnForm} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({id, name, number}) => dispatch(phonebookActions.addContact({id, name, number}))\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport { connect } from 'react-redux';\nimport phonebookActions from '../../redux/phonebook-actions';\n\nfunction ContactList({ contacts = [], onDeleteContact }) {\n  return (\n    <>\n      <ul className={s.listOfContact}>\n        {contacts.map(contact => (\n          <li key={contact.id} className={s.itemOfListContact}>\n            <p className={s.itemNameContact}>{contact.name} </p>\n            <p className={s.itemNumberContact}>{contact.number}</p>\n            <button\n              className={s.btnOfListContact}\n              type=\"button\"\n              onClick={() => onDeleteContact(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normolizedFilter = filter.toLowerCase();\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normolizedFilter),\n  );\n};\n\nconst mapStateToProps = ({contacts:{items, filter}}) => ({\n  contacts: getVisibleContacts(items, filter)\n});\n\nconst mapDispatchToProps = dispatch => ({\nonDeleteContact: (contactId) => dispatch(phonebookActions.deleteContact(contactId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport {connect} from 'react-redux';\nimport phonebookActions from '../../redux/phonebook-actions';\n\nconst Filter = ({ value = '', onChangeFilter }) => {\n  return (\n    <>\n      <label className={s.filterLabel}>\n        Filter contacts by name\n        <input\n          className={s.filterInput}\n          type=\"text\"\n          value={value}\n          onChange={onChangeFilter}\n        />\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: e => dispatch(phonebookActions.changeFilter(e.currentTarget.value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import './App.css';\nimport s from './App.module.css';\nimport { Component } from 'react';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport {connect} from 'react-redux';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className={s.container}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n};\n\nexport default connect ()(App);\n\n\n  // state = {\n  //   contacts: contacts,\n  //   filter: '',\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contact', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // addContact = contactNew => {\n  //   if (\n  //     this.state.contacts.find(contact =>\n  //       contact.name.toLowerCase().includes(contactNew.name.toLowerCase()),\n  //     )\n  //   ) {\n  //     alert(`${contactNew.name} is already in contacts`);\n  //   } else {\n  //     const newContact = {\n  //       id: shortid.generate(),\n  //       name: contactNew.name,\n  //       number: contactNew.number,\n  //     };\n  //     this.setState(prevState => ({\n  //       contacts: [newContact, ...prevState.contacts],\n  //     }));\n  //   }\n  // };\n\n  // onDeleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contactId !== contact.id),\n  //     filter: '',\n  //   }));\n  // };\n\n  // onChangeFilter = e => {\n  //   this.setState({ filter: e.currentTarget.value });\n  // };\n\n  // getVisibleContacts = () => {\n  //   const { contacts, filter } = this.state;\n  //   const normolizedFilter = filter.toLowerCase();\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normolizedFilter),\n  //   );\n  // };\n","import {createReducer} from '@reduxjs/toolkit';\r\nimport {combineReducers} from 'redux';\r\nimport actions from './phonebook-actions';\r\n\r\nconst items = createReducer([],{\r\n    [actions.addContact]: (state, {type, payload}) => {\r\n        if (\r\n            state.find(contact =>\r\n                contact.name.toLowerCase().includes(payload.name.toLowerCase()),\r\n            )\r\n        ) {\r\n            alert(`${payload.name} is already in contacts`);\r\n        } else {\r\n        return [payload, ...state]\r\n        };\r\n    },\r\n\r\n    [actions.deleteContact]: (state, {type, payload}) => {\r\n        return state.filter(contact => payload !== contact.id)\r\n    }\r\n});\r\n\r\nconst filter = createReducer('',{\r\n    [actions.changeFilter]: (_, {type, payload}) => payload,\r\n    [actions.deleteContact]: (state, {type, payload}) => '',\r\n});\r\n\r\nexport default combineReducers({\r\n    items: items,\r\n    filter: filter\r\n});","import {configureStore, combineReducers, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport phonebookReducer from './phonebook-reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contact',\r\n  storage,\r\n  blacklist: ['filter']\r\n};\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: phonebookReducer\r\n// });\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  })\r\n]\r\n\r\n// const persistedReducer = persistReducer(contactsPersistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, phonebookReducer)\r\n  },\r\n  middleware\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default {store, persistor};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\nimport {BrowserRouter} from 'react-router-dom';\nimport {PersistGate} from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store.store} >\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}